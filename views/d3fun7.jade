extend layout
block content

	style(type='text/css').
		.node {
				fill: #ccc;
				stroke: #fff;
				stroke-width: 2px;
		}

		.link {
				stroke: #777;
				stroke-width: 2px;
		}
		path.link {
			fill: none;
			stroke: #666;
			stroke-width: 1.5px;
		}

		circle {
			fill: #ccc;
			stroke: #fff;
			stroke-width: 1.5px;
		}

		text {
			fill: #000;
			font: 10px sans-serif;
			pointer-events: none;
		}

	.container
		.page-header
				h2 d3.js Force Layout

		p. 
			Source: <a href=http://bl.ocks.org/sathomas/11550728>http://bl.ocks.org/sathomas/11550728</a>

		#drawspace


		script.

				console.log('test');
				d3.csv("/data/force.csv", function(error, links) {

				if(error) return console.error(error);

				var nodes = {};

				// Compute the distinct nodes from the links.
				links.forEach(function(link) {
						link.source = nodes[link.source] || 
								(nodes[link.source] = {name: link.source});
						link.target = nodes[link.target] || 
								(nodes[link.target] = {name: link.target});
						link.value = +link.value;
				});

				var width = 960,
						height = 500;

				var force = d3.layout.force()
						.nodes(d3.values(nodes))
						.links(links)
						.size([width, height])
						.linkDistance(60)
						.charge(-300)
						.on("tick", tick)
						.start();
						
		
				console.log("Hello");
				var svg = d3.select("#drawspace").append("svg")
						.attr("width", width)
						.attr("height", height);

				// build the arrow.
				svg.append("svg:defs").selectAll("marker")
						.data(["end"])      // Different link/path types can be defined here
					.enter().append("svg:marker")    // This section adds in the arrows
						.attr("id", String)
						.attr("viewBox", "0 -5 10 10")
						.attr("refX", 15)
						.attr("refY", -1.5)
						.attr("markerWidth", 6)
						.attr("markerHeight", 6)
						.attr("orient", "auto")
					.append("svg:path")
						.attr("d", "M0,-5L10,0L0,5");

				// add the links and the arrows
				var path = svg.append("svg:g").selectAll("path")
						.data(force.links())
					.enter().append("svg:path")
				//    .attr("class", function(d) { return "link " + d.type; })
						.attr("class", "link")
						.attr("marker-end", "url(#end)");

				// define the nodes
				var node = svg.selectAll(".node")
						.data(force.nodes())
					.enter().append("g")
						.attr("class", "node")
						.call(force.drag);

				// add the nodes
				node.append("circle")
						.attr("r", 5);

				// add the text 
				node.append("text")
						.attr("x", 12)
						.attr("dy", ".35em")
						.text(function(d) { return d.name; });
				// add the curvy lines
				function tick() {
					console.log("hmm");
						path.attr("d", function(d) {
								var dr = 0;
								return "M" + 
										d.source.x + "," + 
										d.source.y + "A" + 
										dr + "," + dr + " 0 0,1 " + 
										(d.source.x+20) + "," + 
										(d.source.y+20)
						});

						node
								.attr("transform", function(d) { 
								return "translate(" + (d.x+40) + "," + (d.y+40) + ")"; });
				}
				
				


				});

