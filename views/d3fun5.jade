extend layout

block content

	.page-header
		h1 d3.js Fundamentals 
			small working with data
	
	style.
		.x-axis path, .y-axis path,
		.x-axis line, .y-axis line {
			fill: none;
			stroke: black;
			shape-rendering: crispEdges;
		}
		.x-axis, .y-axis text{
			font-family: sans-serif;
			font-size: 10px;
		}
		div.tooltip{
			position: absolute;
			max-width:200px;
			height: auto;
			padding:5px;
			background-color:white;
			border-radius:5px;
			box-shadow:4px 4px 10px rbga(0,0,0,0.5);
			pointer-events: none; 
			font-family: sans-serif;
			font-size: 12px;
		}
	.row(style='background:none; text-align:center;')
		h2 Transition between different datasets
		.col-lg-9#chart1
			p Choose Date Range
				select(id='date-option')
					option(value='12') Last Year
					option(value='6') Last 6/mo
					option(value='3') Last Quater
		
		script.

			var h = 400;
			var w = 800;
			var padding = 20;
			var scale = d3.scale.linear() // also .log(), pow()
									.domain([130,350]) // max/min of values
									.range([10,100]);	 // SVG output pixesl
			

			d3.json('https://api.github.com/repos/bsullins/d3js-resources/contents/monthlySalesbyCategoryMultiple.json', 
				function(error,data){
					if (error)
						console.log(error);
					
					var decodedData = JSON.parse(window.atob(data.content));
					decodedData.contents.forEach(function(ds){
						showHeader(ds);
						buildLine(ds);
					});


			d3.select('select')
				.on('change',function(d,i){
					var sel = d3.select('#date-option').node().value;

					var decodedData = JSON.parse(window.atob(data.content));
					decodedData.contents.forEach(function(ds){
						ds.monthlySales.splice(0,ds.monthlySales.length-sel)
						updateLine(ds);
					});
				});
			});				


			function showHeader(ds){
				d3.select('#chart1').append('h3')
						.text(ds.category + ' Sales (2013)');	
			}
			function getDate(d){
				// 20130101
				var strDate = new String(d);
				var year = strDate.substr(0,4);
				var month = strDate.substr(4,2)-1;
				var day = strDate.substr(6,2);
				//console.log('year: ' + year);
				//console.log('month: ' + month);
				//console.log('day: ' + day);
				return new Date(year,month,day);
			}
			function buildLine(ds){

				console.log("Building line");
				var minDate = getDate(ds.monthlySales[0]['month']);
				var maxDate = getDate(ds.monthlySales[ds.monthlySales.length-1]['month']);

				var tooltip = d3.select('#chart1').append('div')
											.attr('class','tooltip')
											.style('opacity',0)

				console.log('min: ' + minDate + ' max: ' + maxDate);
				var xScale = d3.time.scale().domain([minDate,maxDate]).range([padding+5,w-padding]);
				var yScale = d3.scale.linear()
											.domain([0, d3.max(ds.monthlySales,function(d){ return d.sales;}) ])
											.range([h-padding,10]);
				// Axis
				var yAxisGen = d3.svg.axis().scale(yScale).orient('left').ticks(4);
				var xAxisGen = d3.svg.axis().scale(xScale).orient('bottom').tickFormat(d3.time.format('%b'));

				var lineFun = d3.svg.line()
					.x(function(d) { return xScale(getDate(d.month)); })
					.y(function(d) { return yScale(d.sales); })
					.interpolate('linear');

				var svg = d3.select('#chart1').append('svg').attr({ width:w,height:h,'id':'svg-'+ds.category });

				// Axis
				var yAxis = svg.append('g').call(yAxisGen)
										.attr('class','y-axis')
										.attr('transform','translate(' + padding + ',0)')
				var xAxis = svg.append('g').call(xAxisGen)
										.attr('class','x-axis')
										.attr('transform','translate(0,'+(h-padding) +')')

				var viz = svg.append('path')
					.attr({
						d: lineFun(ds.monthlySales),
						'stroke': 'purple',
						'stroke-width': 2,
						'fill': 'none',
						'class':'path-'+ds.category
					});

				var dots = svg.selectAll('circle')
						.data(ds.monthlySales)
						.enter()
						.append('circle')
						.attr({
							cx:  function(d) { return xScale(getDate(d.month)) }, 
							cy:  function(d) { return yScale(d.sales); },
							r: 5,
							'fill': "#666666",
							class: 'circle-'+ds.category
							})
						.on('mouseover',function(d){
							tooltip.transition()
								.duration(500)
								.style('opacity',.85);
							tooltip.html('<strong>Sales $' + d.sales + 'K</strong>')
								.style('left',(d3.event.pageX) + 'px' )
								.style('top',(d3.event.pageY-160) + 'px');
						})
						.on('mouseout', function(d) {
							tooltip.transition()
									.duration(300)
									.style('opacity',0);
						});
						
			}


			function updateLine(ds){

				var minDate = getDate(ds.monthlySales[0]['month']);
				var maxDate = getDate(ds.monthlySales[ds.monthlySales.length-1]['month']);
				//console.log('min: ' + minDate + ' max: ' + maxDate);
				var xScale = d3.time.scale().domain([minDate,maxDate]).range([padding+5,w-padding]);
				var yScale = d3.scale.linear()
											.domain([0, d3.max(ds.monthlySales,function(d){ return d.sales;}) ])
											.range([h-padding,10]);
				// Axis
				var yAxisGen = d3.svg.axis().scale(yScale).orient('left').ticks(4);
				var xAxisGen = d3.svg.axis().scale(xScale).orient('bottom').tickFormat(d3.time.format('%b'))
													.ticks(ds.monthlySales.length-1);

				var lineFun = d3.svg.line()
					//.x(function(d) { return ((d.month-20130001)/3.25); })
					.x(function(d) { return xScale(getDate(d.month)); })
					//.y(function(d) { return h-d.sales; })
					.y(function(d) { return yScale(d.sales); })
					.interpolate('linear');

				var svg = d3.select('#chart1').select('#svg-'+ds.category).attr({ width:w,height:h,'id':'svg-'+ds.category });

				// Axis
				var yAxis = svg.selectAll('g.y-axis').call(yAxisGen)
				var xAxis = svg.selectAll('g.x-axis').call(xAxisGen)

				var viz = svg.selectAll('.path-'+ds.category)
					.transition()
					.duration(1000)
					//.ease('linear')
					//.ease('elastic')
					.ease('bounce')
					//.ease('circle')
					.attr({
						d: lineFun(ds.monthlySales)
					});
				
				var dots = svg.selectAll('.circle-'+ds.category)
						.transition()
						.duration(500)
						.attr({
							d: 'ds.monthlySales',
							cx:  function(d) { return xScale(getDate(d.month)) }, 
							cy:  function(d) { return yScale(d.sales); },
							r: 5,
							'fill': "red",
							class: 'circle-'+ds.category
							})
						/*
						.on('mouseover',function(d){
							tooltip.transition()
								.duration(500)
								.style('opacity',.85);
							tooltip.html('<strong>Sales $' + d.sales + 'K</strong>')
								.style('left',(d3.event.pageX) + 'px' )
								.style('top',(d3.event.pageY-160) + 'px');
						})
						.on('mouseout', function(d) {
							tooltip.transition()
									.duration(300)
									.style('opacity',0);
						});
						*/
			}

	.row(style='background:none; text-align:center;')
		h2 Pop-ups
		.col-lg-9#chart2
		
		
		script.
				function colorPicker(v){
					if (v <= 20) { return '#666666'; }
					else if (v > 20) { return '#FF0033'; }
				}

				var w = 300;
				var h = 100;
				var max = 50;
				var dataset = [50, 8, 15, 20, 40, 12, 10,32,28,10,25,40];
				var svg = d3.select('#chart2').append('svg')
										.attr('width',w)
										.attr('height',h)
										.attr('style','margin: 30px 0px 60px 0px');
				svg.selectAll('rect')
					.data(dataset).enter().append('rect')
					.attr({
						x: 			function(d,i) {return i*(w/dataset.length);},
						y: 			function(d,i) {return h * (1 - d/max);},
						width: 	w/dataset.length-2,
						height: function(d) {return d/max*h;},
						fill: 	function(d) {return colorPicker(d);}
					})
					//.append('title')
					//.text(function(d){ return d; });
					.on('mouseover',function(d){
						svg.append('text')
							.text(d)
							.attr({
								'text-anchor': 'middle',
								//x:	function(d,i) {return i*(w/dataset.length) + (w/dataset.length-padding)/2;},
								x: parseFloat(d3.select(this).attr('x')) + 
										parseFloat(d3.select(this).attr('width')/2),
								y: parseFloat(d3.select(this).attr('y'))+12,
								'font-family': 'sans-serif',
								'font-size': 12,
								'fill': 'white',
								id : 'tooltip'
							});
					})
					.on('mouseout',function(){
						d3.select('#tooltip').remove()
					});

					
